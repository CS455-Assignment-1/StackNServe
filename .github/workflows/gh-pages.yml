name: Deploy to GitHub Pages

on:
  [push]

jobs:
  build :
    name: SonarCloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"CS455-Assignment-1_StackNServe" /o:"cs455-assignment-1" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build src/StackNServe/StackNServe.csproj
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Check SonarCloud Quality Gate
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          SONAR_STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=CS455-Assignment-1_StackNServe" | jq -r '.projectStatus.status')
          if [ "$SONAR_STATUS" != "OK" ]; then
            echo "Quality gate failed: $SONAR_STATUS"
            exit 1
          else
            echo "Quality gate passed!"
          fi

  deploy-to-github-pages:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
    # Checkout the code from the master branch
    - uses: actions/checkout@v3
    
    # Setup .NET Core SDK
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.107

    # Publish the project
    - name: Publish .NET Core Project
      run: dotnet publish src/StackNServe/StackNServe.csproj -c Release -o release --nologo
    
    # Verify that index.html exists after the publish
    - name: Verify index.html exists
      run: |
        if [ ! -f release/wwwroot/index.html ]; then
          echo "Error: index.html not found!"
          exit 1
        fi

    # Change base tag in index.html to point to the correct subdirectory (StackNServe)
    - name: Change base-tag in index.html
      run: sed -i 's/<base href="\/" \/>/<base href="\/StackNServe\/" \/>/g' release/wwwroot/index.html
    
    # Copy index.html to 404.html for GitHub Pages fallback routing
    - name: Copy index.html to 404.html
      run: cp release/wwwroot/index.html release/wwwroot/404.html

    # Add a .nojekyll file to prevent Jekyll processing
    - name: Add .nojekyll file
      run: touch release/wwwroot/.nojekyll

    # Deploy the wwwroot folder to the gh-pages branch
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: release/wwwroot
