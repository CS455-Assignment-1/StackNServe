@page "/New_Game"
@using DemoRepo.Pages
@using DemoRepo.Shared

@inject GlobalStringListService StringListService


<style>
    .Play_Again 
    {
        background-color: black;
        color: white;
        text-align: center;
        padding: 10px;
        margin: 10px;
        cursor: pointer;
        display: flex;
        flex-direction: column;
    }
    .Play_Again_Heading 
    {
        font-size: 40px;
        align-self: center;
        justify-self: center;
        margin-top:10px;

    }
</style>
<div class="Home_Page">
    @if(isEnded)
    {
        <h1 class="Time_Elapsed_Message">Your time finished!</h1><br>
        <h2 class="Time_Elapsed_Score">Your score was:@New_Player.Balance</h2><br>
        <h3 class="Time_Elapsed_Instruction">Click on the button below to play again</h3>
        <div class="Play_Again_Button">
            <div class="Play_Again" @onclick="ReloadGame">
                <h1 class="Play_Again_Heading">PLAY AGAIN</h1>
            </div>
        </div>
    }
    else
    {
        <div class="Select_Buttons">
            <Bun_Select />
            <br>
            <Patty_Select />
            <br>
            <Toppings_Select />
            <br>
            <Sauces_Select />
        </div>
        <Main_Page_Header />
        <div class="Timer_Divison">
            <CountdownTimer InitialTimeInSeconds="120" OnTimerFinished= "HandleTimerFinished" ShowResetButton = "false" />
        </div>
        @* <div class="burger-and-table-container"> *@
        <div class="Cooking_Table_Division">
            <div class="burger-container">
                @foreach (var ingredient in StringListService.StringList)
                {
                    <div class="@ingredient.ToLower().Replace(" ", "-")"></div>
                }
            </div>
            <Cooking_Table />
        </div>
        @* </div> *@

        <div class="Order_Division">
            <Order Order_List="@currentOrderList" Order_Price="@currentOrderPrice" />
        </div>
        <div class="Skip_Play_Buttons">
            <Skip OnSkip="Player_Skip"/>
            <Submit OnSubmit="CheckList"/>
        </div>

        <div class="Score_Board_Divison">
            <Score_Board CurrentScore="New_Player.Balance"/>
        </div>
    }
</div>

@code
{
    private bool isEnded=false;
    private List<string> currentOrderList = new List<string>();
    private int currentOrderPrice = 0;
    Users New_Player= new Users();
    private void HandleTimerFinished()
    {
        isEnded = true;
        Console.WriteLine("Timer Finished");
    }
    private List<string> Fetch_Order_List()
    {
        BurgerComponents burgerComponents = new BurgerComponents();
        return burgerComponents.Order_List;
    }
    private int Fetch_Order_Price()
    {
        Random random = new Random();
        return random.Next(5, 200);
    }

    private void ReloadGame()
    {
        if (isEnded)
        {
            isEnded = false;
            New_Player = new Users();
        }
    }
    private void UpdateOrder()
    {
        currentOrderList = Fetch_Order_List();
        currentOrderPrice = Fetch_Order_Price();
        StateHasChanged();
    }

    private void Player_Skip()
    {
        New_Player.Balance -= 5;
        StringListService.ClearList();
        UpdateOrder();
        StateHasChanged();
    }
    
    protected override void OnInitialized()
    {
        StringListService.OnChange += StateHasChanged;
        UpdateOrder();
    }

    public void Dispose()
    {
        StringListService.OnChange -= StateHasChanged;
    }

    private void CheckList()
    {
        //Compare the Elements in the two lists.
        //If they are the same, add the price to the player's balance
        bool truth = true;
        foreach (var item in currentOrderList)
        {
            if (StringListService.StringList.Contains(item))
            {
                Console.WriteLine("You passed the order");
                Console.WriteLine(item);
                continue;
            }
            else
            {
                Console.WriteLine("You failed the order");
                Console.WriteLine(item);

                New_Player.Balance -= 10;
                truth = false;
                break;
            }
        }
        if (truth)
        {
            New_Player.Balance += currentOrderPrice;
        }
        Clear_List();
    }
    private void Clear_List()
    {
        StringListService.ClearList();
    }
}