@page "/"
@using DemoRepo.Pages
@using DemoRepo.Shared
<style>
    @@import url('https://fonts.googleapis.com/css2?family=Cedarville+Cursive&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

    .burger-container {
        display: flex;
        flex-direction: column-reverse;
        align-items: center;
        min-height: 300px;
        margin-bottom: 20px;
        z-index: 15;
    }
    .burger-container > div {
        width: 200px;
        margin: 2px;
        border-radius: 10px;
    }


    .sesame-bun { 
        background-color: #F4A460; 
        border-radius: 50px 50px 0 0;
        height: 60px;
        position: relative;
        overflow: hidden;
    }
    .garlic-bun { 
        background-color: #F4A460; 
        border-radius: 50px 50px 0 0;
        height: 60px;
        position: relative;
        overflow: hidden;
    }
    .parmesan-bun { 
        background-color: #F4A460; 
        border-radius: 50px 50px 0 0;
        height: 60px;
        position: relative;
        overflow: hidden;
    }
    .plain-bun { 
        background-color: #F4A460; 
        border-radius: 50px 50px 0 0;
        height: 60px;
        position: relative;
        overflow: hidden;
    }

    .bun-top::after {
        content: '';
        position: absolute;
        top: 5px;
        left: 10%;
        right: 10%;
        height: 10px;
        background-color: #D2691E;
        border-radius: 50%;
    }
    .bun-bottom { 
        background-color: #F4A460;
        border-radius: 0 0 50px 50px;
        height: 30px;
    }

    .veggie-patty { 
        background-color: #e68b2a;
        height: 30px;
        border-radius: 10px;
    }
    .chicken-patty { 
        background-color: #532300;
        height: 30px;
        border-radius: 10px;
    }
    .fish-patty { 
        background-color: #92562b;
        height: 30px;
        border-radius: 10px;
    }
    .portobello-mushroom-patty { 
        background-color: #aa623c;
        height: 30px;
        border-radius: 10px;
    }

    .aioli
    {
        background-color: #ffefb3;
        height: 10px;
    }
    .bbq-sauce
    {
        background-color: #8b0000;
        height: 10px;
    }
    .ketchup
    {
        background-color: #ff0000;
        height: 10px;
    }
    .mustard
    {
        background-color: #ffdb58;
        height: 10px;
    }
    .hot-sauce
    {
        background-color: #ff4500;
        height: 10px;
    }
    .ranch
    {
        background-color: #c4bf60;
        height: 10px;
    }
    .mayonnaise
    {
        background-color: #fff5ee;
        height: 10px;
    }

    .onion { 
        background-color: #FFA07A;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    .tomato { 
        background-color: #FF6347;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    .avocado { 
        background-color: #7CFC00;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    .bacon { 
        background-color: #8B0000;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    .cheese { 
        background-color: #FFD700;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    .egg{
        background-color: #F0E68C;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    .jalapenos{
        background-color: #FFA500;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    .lettuce { 
        background-color: #32CD32;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    .pickles { 
        background-color: #228B22;
        height: 15px;
        border-radius: 0 0 20px 20px;
    }
    
    .ingredients-list {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
    }

    .Home_Page
    {
        display:grid;
        grid-template-columns: 1fr 4fr 1fr;
        grid-template-rows: 0.5fr 0.5fr 1fr;
    }
    .Main_Page_Header_Class
    {
        grid-column: 2;
    }
    .Select_Buttons
    {
        grid-row-start: 1;
        grid-row-end: 3;
    }
    .Order_Division
    {
        grid-row:1;
        grid-column: 3;
    }
    .Score_Board_Divison
    {
        grid-row: 3;
        grid-column: 3;
    }
    .Cooking_Table_Divison
    {
        grid-column: 2;
    }
    .Timer_Divison
    {
        margin-top: -50px;
        display: flex;
        justify-content: center;
        text-align: center;
        grid-column: 2;
        font-size: 1.5rem;
    }
    .Skip_Play_Buttons
    {
        grid-column: 3;
        grid-row: 2;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
    }
    .Time_Elapsed_Message
    {
        font-family: 'Cedarville Cursive', cursive;
        font-size: 2rem;
        color: black;
        text-align: center;
        grid-column: 2;
    }
    .Time_Elapsed_Score
    {
        font-family: 'Cedarville Cursive', cursive;
        font-size:3rem;
        color: #E36565;
        text-align: center;
        grid-column: 2;
    }
    .Time_Elapsed_Instruction
    {
        font-family: 'Cedarville Cursive', cursive;
        font-size: 1.5rem;
        color: black;
        text-align: center;
        grid-column: 2;
    }
    .Play_Again_Button
    {
        grid-column: 2;
    }
</style>

@inject GlobalStringListService StringListService

<div class="Home_Page">
    @if(isEnded)
    {
        <h1 class="Time_Elapsed_Message">Your time finished!</h1><br>
        <h2 class="Time_Elapsed_Score">Your score was:@New_Player.Balance</h2><br>
        <h3 class="Time_Elapsed_Instruction">Click on the button below to play again</h3>
        <div class="Play_Again_Button">
            <Play_Again OnPlayAgain="() => { isEnded = false; New_Player = new Users(); }" />
        </div>
    }
    else
    {
        <div class="Select_Buttons">
        <Bun_Select />
        <br>
        <Patty_Select />
        <br>
        <Toppings_Select />
        <br>
        <Sauces_Select />
        </div>
        <Main_Page_Header />
        <div class="Timer_Divison">
            <CountdownTimer InitialTimeInSeconds="120" OnTimerFinished= "HandleTimerFinished" ShowResetButton = "false" />
        </div>

        
        @* <div class="burger-and-table-container"> *@
            <div class="burger-container">
                @foreach (var ingredient in StringListService.StringList)
                {
                    <div class="@ingredient.ToLower().Replace(" ", "-")"></div>
                }
            </div>
            <div class="Cooking_Table_Division">
                <Cooking_Table />
            </div>
        @* </div> *@

        <div class="Order_Division">
            <Order Order_List="@currentOrderList" Order_Price="@currentOrderPrice" />
        </div>
        <div class="Skip_Play_Buttons">
            <Skip OnSkip="Player_Skip"/>
            <Submit OnSubmit="CheckList"/>
        </div>

        <div class="Score_Board_Divison">
            <Score_Board CurrentScore="New_Player.Balance"/>
        </div>
    }
</div>

@code
{
    private bool isEnded=false;
    private List<string> currentOrderList = new List<string>();
    private int currentOrderPrice = 0;
    Users New_Player= new Users();
    private void HandleTimerFinished()
    {
        isEnded = true;
        Console.WriteLine("Timer Finished");
    }
    private List<string> Fetch_Order_List()
    {
        BurgerComponents burgerComponents = new BurgerComponents();
        return burgerComponents.Order_List;
    }
    private int Fetch_Order_Price()
    {
        Random random = new Random();
        return random.Next(5, 200);
    }

    private void UpdateOrder()
    {
        currentOrderList = Fetch_Order_List();
        currentOrderPrice = Fetch_Order_Price();
        StateHasChanged();
    }

    private void Player_Skip()
    {
        New_Player.Balance -= 5;
        StringListService.ClearList();
        UpdateOrder();
        StateHasChanged();
    }
    
    protected override void OnInitialized()
    {
        StringListService.OnChange += StateHasChanged;
        UpdateOrder();
    }

    public void Dispose()
    {
        StringListService.OnChange -= StateHasChanged;
    }

    private void CheckList()
    {
        //Compare the Elements in the two lists.
        //If they are the same, add the price to the player's balance
        bool truth = true;
        foreach (var item in currentOrderList)
        {
            if (StringListService.StringList.Contains(item))
            {
                Console.WriteLine("You passed the order");
                Console.WriteLine(item);
                continue;
            }
            else
            {
                Console.WriteLine("You failed the order");
                Console.WriteLine(item);

                New_Player.Balance -= 10;
                truth = false;
                break;
            }
        }
        if (truth)
        {
            New_Player.Balance += currentOrderPrice;
        }
        Clear_List();
    }
    private void Clear_List()
    {
        StringListService.ClearList();
    }
}